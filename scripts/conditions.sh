#!/bin/bash

datarate=1bps
HOST=localhost
PORT=10000
TYPE=both
INTERFACE="placeholder"
verbose=0

function limit() {
    printf "Setting datarate of the specified interface to: %s\n" "$datarate"
    cat > /tmp/TrafficToll.yaml << EOF
#Begin /tmp/TrafficToll.yaml - (generated by https://github.com/AAUCrisp/P6-A3-207/blob/32-bad-conditions-implementation/scripts/conditions.sh)

download:           ${datarate}
upload:             ${datarate}
download-minimum:   ${datarate}
upload-minimum:     ${datarate}

download-priority: 0
upload-priority: 0

#End /tmp/TrafficToll.yaml
EOF
	if [ "$INTERFACE" == "placeholder" ]; then
            printf "Specify the \033[38;2;150;150;255minterface name\033[0m, a list of devices should be defined above ["
            python3.10 -c "import json;data='$(ip -j a)';print(', '.join(['\033[38;2;150;150;255m'+interface['ifname']+'\033[0m' for interface in json.loads(data)]), end='')"
            printf "]: "
            read -r INTERFACE
	fi
    echo $PASSWORD | sudo -S tt "$INTERFACE" /tmp/TrafficToll.yaml

}

function stressTest(){
    if [[ "$TYPE" == server ]]; then
	echo "Initializing server..."
        netcat -l "$HOST" "$PORT"
    elif [[ "$TYPE" == both ]]; then
	    echo "Initializing server..."
	    screen -dmS nc netcat -l "$HOST" "$PORT"
	    sleep 1
    fi
    if [[ "$TYPE" == client ]] || [[ "$TYPE" == both ]]; then
	    echo "Initializing client..."
	    exec 3<>/dev/tcp/"$HOST"/"$PORT"
	    i=0
	    while true; do
		    i=$((i+1))
		    echo -ne "$i\r" >&3
	    done
    fi
}

############################## main section #############################
#if [ $EUID != 0 ] && [ "$1" != "help" ]; then
#    printf "\033[38;2;255;0;0mError\033[0m: This script requires root access\n"
#    exit 1
#fi
# Extract arguments
for arg in "$@"; do
    if [[ "$arg" != --* ]]; then
        continue
    elif [[ "$arg" == --datarate* ]]; then
        datarate=${arg#*"="}
    elif [[ "$arg" == --host* ]]; then
        HOST=${arg#*"="}
    elif [[ "$arg" == --port* ]]; then
        PORT=${arg#*"="}
    elif [[ "$arg" == --iface* ]]; then
	INTERFACE=${arg#*"="}
    elif [[ "$arg" == --type* ]]; then
	TYPE=${arg#*"="}
    elif [[ "$arg" == --password* ]]; then
    	PASSWORD=${arg#*"="}
    elif [[ "$arg" == --modemtype* ]]; then
        val=${arg#*"="}
        if [ "$(mmcli -m any --set-allowed-modes="$val")" ]; then
            echo "Set the modem type to $val"
            if [ $# == 1 ]; then
                exit 0
            fi
        else
            if [ $# == 1 ]; then
                exit 1
            fi
        fi
    elif [ "$arg" == "--verbose" ]; then
        verbose=1
    else
        printf "No such argument: \033[38;2;0;255;0m%s\033[0m, type './scripts/conditions.sh help' for help\n" "$arg"
        exit 1
    fi
done

# Resolve dependencies
if [ "$(which netcat)" ]; then
    if [ "$verbose" == 1 ]; then
        printf "Found netcat installed at: %s\n" "$(which netcat)"
    fi
else 
    printf "\033[38;2;255;0;0mError\033[0m: netcat is not installed!\n"
    exit 1
fi
if [ "$(which tt)" ]; then
    if [ "$verbose" == 1 ]; then
        printf "Found traffictoll installed at: %s\n" "$(which tt)"
    fi
else
    printf "\033[38;2;255;0;0mError\033[0m: TrafficToll is not installed!\n"
    exit 1
fi

# execute commands passed as argument
if [ "$1" == "limit" ]; then
    limit
elif [ "$1" == "stress" ]; then
    stressTest
elif [ "$1" == "help" ]; then
    printf "\033[1mUsage\033[0m:\t\t./scripts/conditions.sh \033[38;2;255;75;0m<command>\033[0m \033[38;2;0;255;0m<arg1>\033[0m=\033[38;2;100;50;200m<val1>\033[0m \033[38;2;0;255;0m<arg2>\033[0m=\033[38;2;100;50;200m<val2>\033[0m ...
\033[1mExample\033[0m:\t./scripts/conditions.sh stress --host=localhost --port=8888

\033[1mCommands\033[0m:
    \033[38;2;255;75;0mlimit\033[0m:\tLimit the datarate on a network interface using TrafficToll
    \033[38;2;255;75;0mstress\033[0m:\tStress test the network by flooding it with UDP packets using NetCat
    \033[38;2;255;75;0mhelp\033[0m:\tDisplay this help message

\033[1mArguments\033[0m:
    \033[38;2;0;255;0m--modemtype\033[0m:\tSpecify the type of the modem, this will set it systemwide, possible values are: [\033[38;2;100;50;200m3G\033[0m, \033[38;2;100;50;200m4G\033[0m, \033[38;2;100;50;200m5G\033[0m]
    \033[38;2;0;255;0m--datarate\033[0m:\tSpecify the datarate for the limit command
    \033[38;2;0;255;0m--iface\033[0m:\tSpecify an interface on the command line for the limit command
    \033[38;2;0;255;0m--host\033[0m:\tSpecify the host to use for the stress command
    \033[38;2;0;255;0m--port\033[0m:\tSpecify the port to use for the stress command
    \033[38;2;0;255;0m--type\033[0m:\tSpecify the type of the connetion in the stress test, values can be [\033[38;2;100;50;200mclient\033[0m, \033[38;2;100;50;200mserver\033[0m, \033[38;2;100;50;200mboth\033[0m]\n"
else
    printf "No such command: \033[38;2;255;75;0m%s\033[0m, type './scripts/conditions.sh help' for help\n" "$1"
    exit 1
fi
